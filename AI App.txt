// import React, { useState, useEffect, useRef } from "react";
// import { AiOutlineLoading3Quarters } from "react-icons/ai"; // Loading spinner icon from react-icons

// function Chat() {
//   const [messages, setMessages] = useState([]);
//   const [input, setInput] = useState("");
//   const [loading, setLoading] = useState(false);
//   const chatContainerRef = useRef(null); // Reference for the chat container

//   const fetchAIResponse = async (message) => {
//     const apiKey = import.meta.env.VITE_API_KEY;

//     try {
//       const response = await fetch(
//         `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
//         {
//           method: "POST",
//           headers: {
//             "Content-Type": "application/json",
//           },
//           body: JSON.stringify({
//             contents: [
//               {
//                 role: "user",
//                 parts: [{ text: message }],
//               },
//             ],
//           }),
//         }
//       );

//       const data = await response.json();
//       if (
//         data.candidates &&
//         data.candidates.length > 0 &&
//         data.candidates[0].content &&
//         data.candidates[0].content.parts &&
//         data.candidates[0].content.parts.length > 0
//       ) {
//         return data.candidates[0].content.parts[0].text;
//       } else {
//         return "No response from the AI.";
//       }
//     } catch (error) {
//       console.error("Error fetching AI response:", error);
//       return "An error occurred while fetching the response.";
//     }
//   };

//   const handleSend = async () => {
//     if (input.trim() === "") return;

//     // Append user message to chat
//     setMessages((prev) => [
//       ...prev,
//       { sender: "user", type: "text", content: input },
//     ]);
//     setInput("");
//     setLoading(true);

//     // Fetch AI response
//     const aiResponse = await fetchAIResponse(input);

//     // Append AI response to chat
//     setMessages((prev) => [
//       ...prev,
//       { sender: "ai", type: "text", content: aiResponse },
//     ]);
//     setLoading(false);
//   };

//   // Function to render formatted message content
//   const renderFormattedContent = (content) => {
//     // A simple parser to make text more readable
//     const formattedContent = content.split("\n").map((line, index) => {
//       if (line.startsWith("**")) {
//         // Bold text
//         return (
//           <p key={index} className="font-bold">
//             {line.replace(/\*\*/g, "")}
//           </p>
//         );
//       } else if (line.startsWith("*")) {
//         // List item
//         return (
//           <li key={index} className="list-disc list-inside">
//             {line.replace(/\*/g, "")}
//           </li>
//         );
//       } else if (line.match(/^# /)) {
//         // Heading 1
//         return (
//           <h2 key={index} className="text-lg font-semibold">
//             {line.replace(/^# /, "")}
//           </h2>
//         );
//       } else if (line.match(/^## /)) {
//         // Heading 2
//         return (
//           <h3 key={index} className="text-md font-semibold">
//             {line.replace(/^## /, "")}
//           </h3>
//         );
//       } else {
//         // Regular text
//         return <p key={index}>{line}</p>;
//       }
//     });

//     return <div className="space-y-2">{formattedContent}</div>;
//   };

//   // Function to render different message types
//   const renderMessageContent = (message) => {
//     switch (message.type) {
//       case "text":
//         return message.sender === "ai"
//           ? renderFormattedContent(message.content)
//           : message.content;
//       case "link":
//         return (
//           <a
//             href={message.content}
//             className="text-blue-500 underline"
//             target="_blank"
//             rel="noopener noreferrer"
//           >
//             {message.content}
//           </a>
//         );
//       case "image":
//         return (
//           <img
//             src={message.content}
//             alt="AI provided content"
//             className="max-w-full h-auto rounded"
//           />
//         );
//       default:
//         return message.content;
//     }
//   };

//   // Effect to automatically scroll to the latest message
//   useEffect(() => {
//     if (chatContainerRef.current) {
//       chatContainerRef.current.scrollTop =
//         chatContainerRef.current.scrollHeight;
//     }
//   }, [messages]);

//   return (
//     <div className="flex flex-col h-screen bg-white shadow-md rounded-lg">
//       <div
//         ref={chatContainerRef}
//         className="flex-1 p-4 overflow-y-auto space-y-2"
//       >
//         {messages.map((msg, index) => (
//           <div
//             key={index}
//             className={`p-2 rounded ${
//               msg.sender === "user"
//                 ? "bg-blue-500 text-white self-end"
//                 : "bg-gray-300"
//             }`}
//           >
//             {renderMessageContent(msg)}
//           </div>
//         ))}
//         {loading && (
//           <div className="flex items-center justify-center p-2">
//             <AiOutlineLoading3Quarters
//               className="animate-spin text-gray-500"
//               size={24}
//             />
//           </div>
//         )}
//       </div>
//       <div className="p-4 border-t flex items-center">
//         <input
//           type="text"
//           value={input}
//           onChange={(e) => setInput(e.target.value)}
//           className="flex-1 p-3 border rounded-lg mr-2 resize-none text-lg"
//           placeholder="Type a message..."
//         />
//         <button
//           onClick={handleSend}
//           className="p-3 bg-blue-500 text-white rounded-lg"
//           disabled={loading}
//         >
//           Send
//         </button>
//       </div>
//     </div>
//   );
// }

// export default Chat;


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////New Code///////////////////////////////////////////////////////////////////////////
import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai"; // Loading spinner icon from react-icons

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false); // Track if currently speaking
  const [isTyping, setIsTyping] = useState(false); // Typing indicator
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false); // Track if user has scrolled up
  const recognitionRef = useRef(null); // Ref for speech recognition
  const speechRef = useRef(null); // Ref for SpeechSynthesisUtterance

  // Initialize Speech Recognition API
  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, []);

  // Effect to automatically scroll to the bottom when new messages arrive
  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  // Handle AI response
  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse); // Clean AI's response
        speakText(cleanedResponse); // Speak AI's response
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  // Sanitize text to remove special characters for speech synthesis
  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  // Handle sending messages
  const handleSend = async () => {
    if (input.trim() === "") return;

    // Optimistically add the user's message to the chat
    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    // Fetch AI response in the background
    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  // Handle typing indicator
  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000); // Hide typing indicator after 1 second
  };

  // Start voice input
  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  // Speak text
  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel();
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  // Stop speech synthesis
  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  // Render message content based on type
  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  // Format content (Markdown-like support)
  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        return (
          <p key={index} className="font-bold">
            {line.replace(/\*\*/g, "")}
          </p>
        );
      } else if (line.startsWith("*")) {
        return (
          <li key={index} className="list-disc list-inside">
            {line.replace(/\*/g, "")}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else {
        return <p key={index}>{line}</p>;
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  return (
    <div className="flex flex-col h-screen bg-white shadow-md rounded-lg">
      <div
        ref={chatContainerRef}
        className="flex-1 p-4 overflow-y-auto space-y-2"
        onScroll={() => {
          const container = chatContainerRef.current;
          if (container) {
            userScrolledUp.current =
              container.scrollTop <
              container.scrollHeight - container.clientHeight - 50;
          }
        }}
      >
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-gray-500">User is typing...</div>}
        <div ref={bottomRef} /> {/* Empty div to serve as the scroll target */}
      </div>
      <div className="p-4 border-t flex items-center space-x-2">
        <button
          onClick={startListening}
          className="p-3 bg-green-500 text-white rounded-lg mr-2"
        >
          🎤
        </button>
        <div className="flex-1 relative">
          <input
            type="text"
            value={input}
            onChange={(e) => {
              setInput(e.target.value);
              handleTyping();
            }}
            className="w-full p-3 border rounded-lg resize-none text-lg overflow-auto"
            placeholder="Type a message or click the mic..."
            style={{ maxHeight: "120px", overflowY: "auto" }} // Limit height and add scrolling
          />
        </div>
        <button
          onClick={handleSend}
          className="p-3 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
        {isSpeaking && ( // Conditionally render the Stop button
          <button
            onClick={stopSpeaking}
            className="p-3 bg-red-500 text-white rounded-lg ml-2"
          >
            Stop
          </button>
        )}
      </div>
    </div>
  );
}

export default Chat;

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\3rd Code ///////////////////////////////////////////////////////////

import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai"; // Loading spinner icon from react-icons

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false); // Track if currently speaking
  const [isTyping, setIsTyping] = useState(false); // Typing indicator
  const [showDefaultMessage, setShowDefaultMessage] = useState(true); // Show default message state
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false); // Track if user has scrolled up
  const recognitionRef = useRef(null); // Ref for speech recognition
  const speechRef = useRef(null); // Ref for SpeechSynthesisUtterance

  // Initialize Speech Recognition API
  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, []);

  // Clean up Speech Synthesis when component unmounts
  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  // Effect to automatically scroll to the bottom when new messages arrive
  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  // Handle AI response
  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse); // Clean AI's response
        speakText(cleanedResponse); // Speak AI's response
        setShowDefaultMessage(false); // Hide default message
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  // Sanitize text to remove special characters for speech synthesis
  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  // Handle sending messages
  const handleSend = async () => {
    if (input.trim() === "") return;

    // Optimistically add the user's message to the chat
    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    // Fetch AI response in the background
    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  // Handle typing indicator
  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000); // Hide typing indicator after 1 second
  };

  // Start voice input
  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  // Speak text
  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel(); // Cancel any ongoing speech synthesis
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  // Stop speech synthesis
  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  // Render message content based on type
  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  // Format content (Markdown-like support)
  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        return (
          <p key={index} className="font-bold">
            {line.replace(/\*\*/g, "")}
          </p>
        );
      } else if (line.startsWith("*")) {
        return (
          <li key={index} className="list-disc list-inside">
            {line.replace(/\*/g, "")}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else {
        return <p key={index}>{line}</p>;
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  return (
    <div className="flex flex-col h-screen bg-white shadow-md rounded-lg">
      <div
        ref={chatContainerRef}
        className="flex-1 p-4 overflow-y-auto space-y-2"
        onScroll={() => {
          const container = chatContainerRef.current;
          if (container) {
            userScrolledUp.current =
              container.scrollTop <
              container.scrollHeight - container.clientHeight - 50;
          }
        }}
      >
        {/* Show default message if no AI response has been received */}
        {showDefaultMessage && (
          <div className="p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            Hello users, ask anything to me. I am your chat assistant.
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-gray-500">User is typing...</div>}
        <div ref={bottomRef} /> {/* Empty div to serve as the scroll target */}
      </div>
      <div className="p-4 border-t flex items-center space-x-2">
        <button
          onClick={startListening}
          className="p-3 bg-green-500 text-white rounded-lg mr-2"
        >
          🎤
        </button>
        <div className="flex-1 relative">
          <textarea
            value={input}
            onChange={(e) => {
              setInput(e.target.value);
              handleTyping();
            }}
            className="w-full p-3 border rounded-lg text-lg resize-none overflow-auto"
            placeholder="Type a message or click the mic..."
            rows={1}
          />
        </div>
        <button
          onClick={handleSend}
          className="p-3 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
        {isSpeaking && (
          <button
            onClick={stopSpeaking}
            className="p-3 bg-red-500 text-white rounded-lg ml-2"
          >
            Stop
          </button>
        )}
      </div>
    </div>
  );
}

export default Chat;
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////4th Code ///////////////////////////////////////////////////////////////////////////
// export default Chat;
import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai"; // Loading spinner icon from react-icons
import Prism from "prismjs"; // Import Prism.js for syntax highlighting
import "prismjs/themes/prism-tomorrow.css"; // Import a Prism.js theme for styling code

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false); // Track if currently speaking
  const [isTyping, setIsTyping] = useState(false); // Typing indicator
  const [showDefaultMessage, setShowDefaultMessage] = useState(true); // Show default message state
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false); // Track if user has scrolled up
  const recognitionRef = useRef(null); // Ref for speech recognition
  const speechRef = useRef(null); // Ref for SpeechSynthesisUtterance

  // Initialize Speech Recognition API
  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, []);

  // Clean up Speech Synthesis when component unmounts
  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  // Effect to automatically scroll to the bottom when new messages arrive
  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  // Handle AI response
  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse); // Clean AI's response
        speakText(cleanedResponse); // Speak AI's response
        setShowDefaultMessage(false); // Hide default message
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  // Sanitize text to remove special characters for speech synthesis
  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  // Handle sending messages
  const handleSend = async () => {
    if (input.trim() === "") return;

    // Optimistically add the user's message to the chat
    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    // Fetch AI response in the background
    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  // Handle typing indicator
  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000); // Hide typing indicator after 1 second
  };

  // Start voice input
  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  // Speak text
  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel(); // Cancel any ongoing speech synthesis
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  // Stop speech synthesis
  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  // Render message content based on type
  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  // Format content (Markdown-like support)

  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        const content = line.replace(/\*\*/g, "");
        return (
          <p key={index} className="text-bold-red text-xl">
            {content}
          </p>
        );
      } else if (line.startsWith("*")) {
        const content = line.replace(/\*/g, "");
        return (
          <li key={index} className="text-black text-xl">
            {content}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold text-green-600">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold text-yellow-600">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else if (line.startsWith("!")) {
        return (
          <p key={index} className="text-bold-blue">
            {line.replace(/^!/, "")}
          </p>
        );
      } else {
        return (
          <p key={index} className="text-gray-900">
            {line}
          </p>
        );
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  useEffect(() => {
    Prism.highlightAll(); // Highlight code syntax after component updates
  }, [messages]);

  return (
    <div className="flex flex-col h-screen bg-white shadow-md rounded-lg">
      <div
        ref={chatContainerRef}
        className="flex-1 p-4 overflow-y-auto space-y-2"
        onScroll={() => {
          const container = chatContainerRef.current;
          if (container) {
            userScrolledUp.current =
              container.scrollTop <
              container.scrollHeight - container.clientHeight - 50;
          }
        }}
      >
        {/* Show default message if no AI response has been received */}
        {showDefaultMessage && (
          <div className="p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            Hello users, ask anything to me. I am your chat assistant.
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-gray-500">User is typing...</div>}
        <div ref={bottomRef} /> {/* Empty div to serve as the scroll target */}
      </div>
      <div className="p-4 border-t flex items-center space-x-2">
        <button
          onClick={startListening}
          className="p-3 bg-green-500 text-white rounded-lg mr-2"
        >
          🎤
        </button>
        <div className="flex-1 relative">
          <textarea
            value={input}
            onChange={(e) => {
              setInput(e.target.value);
              handleTyping();
            }}
            className="w-full p-3 border rounded-lg text-lg resize-none overflow-auto"
            placeholder="Type a message or click the mic..."
            rows={1}
          />
        </div>
        <button
          onClick={handleSend}
          className="p-3 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
        {isSpeaking && (
          <button
            onClick={stopSpeaking}
            className="p-3 bg-red-500 text-white rounded-lg ml-2"
          >
            Stop
          </button>
        )}
      </div>
    </div>
  );
}

export default Chat;

////////////////////////////////////////////////5th Less Priority Code ////////////////////////////////////////////////
import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import Prism from "prismjs";
import "prismjs/themes/prism-tomorrow.css";
import "./chat.css";

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showDefaultMessage, setShowDefaultMessage] = useState(true);
  const [isFlashing, setIsFlashing] = useState(false);
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false);
  const recognitionRef = useRef(null);
  const speechRef = useRef(null);

  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        stopListening();
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };

      recognitionRef.current.onstart = () => {
        setIsFlashing(true);
      };

      recognitionRef.current.onend = () => {
        setIsFlashing(false);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, []);

  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse);
        speakText(cleanedResponse);
        setShowDefaultMessage(false);
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  const handleSend = async () => {
    if (input.trim() === "") return;

    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000);
  };

  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel();
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        const content = line.replace(/\*\*/g, "");
        return (
          <p key={index} className="text-bold-red text-xl">
            {content}
          </p>
        );
      } else if (line.startsWith("*")) {
        const content = line.replace(/\*/g, "");
        return (
          <li key={index} className="text-black text-xl">
            {content}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold text-green-600">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold text-yellow-600">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else if (line.startsWith("!")) {
        return (
          <p key={index} className="text-bold-blue">
            {line.replace(/^!/, "")}
          </p>
        );
      } else {
        return (
          <p key={index} className="text-gray-900">
            {line}
          </p>
        );
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  useEffect(() => {
    Prism.highlightAll();
  }, [messages]);

  return (
    <div className="chat-container">
      <div ref={chatContainerRef} className="chat-messages">
        {showDefaultMessage && (
          <div className="mt-[250px] p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            <h1 className="text-5xl text-black">
              Hello users, ask anything to me.{" "}
              <span className="text-pink-900 animate-pulse text-5xl">
                I am your chat assistant.
              </span>
            </h1>
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-gray-500">User is typing...</div>}
        <div ref={bottomRef} />
      </div>
      <div className="chat-input-container">
        <button
          onClick={startListening}
          className={`p-3 ${
            isFlashing ? "flashing" : ""
          } bg-green-500 text-white rounded-lg mr-2`}
        >
          🎤
        </button>
        <textarea
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            handleTyping();
          }}
          className="chat-input"
          placeholder="Type a message or click the mic..."
          rows={1}
        />
        <button
          onClick={handleSend}
          className="send-button p-3 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
        {isSpeaking && (
          <button
            onClick={stopSpeaking}
            className="stop-button p-3 bg-red-500 text-white rounded-lg ml-2"
          >
            Stop
          </button>
        )}
      </div>
    </div>
  );
}

export default Chat;
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////6th Code Beautiful Styling ////////////////////////////////////////////////////////////////////////

import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import Prism from "prismjs";
import "prismjs/themes/prism-tomorrow.css";
import "./chat.css";

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showDefaultMessage, setShowDefaultMessage] = useState(true);
  const [isFlashing, setIsFlashing] = useState(false);
  const [language, setLanguage] = useState("en-IN");
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false);
  const recognitionRef = useRef(null);
  const speechRef = useRef(null);

  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = language;

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        stopListening();
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };

      recognitionRef.current.onstart = () => {
        setIsFlashing(true);
      };

      recognitionRef.current.onend = () => {
        setIsFlashing(false);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, [language]);

  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse);
        speakText(cleanedResponse);
        setShowDefaultMessage(false);
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  const handleSend = async () => {
    if (input.trim() === "") return;

    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000);
  };

  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel();
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language;
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        const content = line.replace(/\*\*/g, "");
        return (
          <p key={index} className="text-bold-red text-xl">
            {content}
          </p>
        );
      } else if (line.startsWith("*")) {
        const content = line.replace(/\*/g, "");
        return (
          <li key={index} className="text-black text-xl">
            {content}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold text-green-600">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold text-yellow-600">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else if (line.startsWith("!")) {
        return (
          <p key={index} className="text-bold-blue">
            {line.replace(/^!/, "")}
          </p>
        );
      } else {
        return (
          <p key={index} className="text-gray-900">
            {line}
          </p>
        );
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  useEffect(() => {
    Prism.highlightAll();
  }, [messages]);

  return (
    <div className="chat-container max-w-screen-md mx-auto p-4">
      <div
        ref={chatContainerRef}
        className="chat-messages h-[80vh] overflow-y-auto mb-2 bg-gray-100 rounded p-2"
      >
        {showDefaultMessage && (
          <div className="mt-32 p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            <h1 className="text-5xl text-black">
              Hello users, ask anything to me.{" "}
              <span className="text-pink-900 animate-pulse text-5xl">
                I am your chat assistant.
              </span>
            </h1>
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 mb-1 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-sm text-gray-500">Typing...</div>}
        <div ref={bottomRef} />
      </div>

      <div className="sticky bottom-0 w-full p-2 bg-white flex flex-col gap-2">
        <div className="flex items-center gap-2">
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            onKeyDown={(e) => {
              if (e.key === "Enter") handleSend();
            }}
            className="flex-grow p-2 border rounded shadow-sm resize-none overflow-y-auto max-h-32"
            placeholder="Type your message..."
          />
          <button
            onClick={handleSend}
            className="bg-green-500 text-white rounded p-2 hover:bg-green-600 transition-colors duration-200"
          >
            Send
          </button>
        </div>
        <div className="flex justify-between gap-2">
          <button
            onClick={isSpeaking ? stopSpeaking : startListening}
            className={`${
              isFlashing ? "bg-red-600" : "bg-blue-500"
            } text-white rounded p-2 hover:bg-blue-600 transition-colors duration-200 flex-grow`}
          >
            {isFlashing ? "Listening..." : "Speak"}
          </button>
          <button
            onClick={stopSpeaking}
            className="bg-yellow-500 text-white rounded p-2 hover:bg-yellow-600 transition-colors duration-200 flex-grow"
          >
            Stop
          </button>
        </div>
      </div>
    </div>
  );
}

export default Chat;

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////7th code Eng & Hindi Support////////////////////////////////////////////////////////
import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import Prism from "prismjs";
import "prismjs/themes/prism-tomorrow.css";
import "./chat.css";

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showDefaultMessage, setShowDefaultMessage] = useState(true);
  const [isFlashing, setIsFlashing] = useState(false);
  const [language, setLanguage] = useState("en-IN");
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false);
  const recognitionRef = useRef(null);
  const speechRef = useRef(null);

  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = language;

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        stopListening();
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };

      recognitionRef.current.onstart = () => {
        setIsFlashing(true);
      };

      recognitionRef.current.onend = () => {
        setIsFlashing(false);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, [language]);

  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse);
        speakText(cleanedResponse);
        setShowDefaultMessage(false);
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  const handleSend = async () => {
    if (input.trim() === "") return;

    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000);
  };

  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel();
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = language;
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        const content = line.replace(/\*\*/g, "");
        return (
          <p key={index} className="text-bold-red text-xl">
            {content}
          </p>
        );
      } else if (line.startsWith("*")) {
        const content = line.replace(/\*/g, "");
        return (
          <li key={index} className="text-black text-xl">
            {content}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold text-green-600">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold text-yellow-600">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else if (line.startsWith("!")) {
        return (
          <p key={index} className="text-bold-blue">
            {line.replace(/^!/, "")}
          </p>
        );
      } else {
        return (
          <p key={index} className="text-gray-900">
            {line}
          </p>
        );
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  useEffect(() => {
    Prism.highlightAll();
  }, [messages]);

  return (
    <div className="chat-container max-w-screen-sm mx-auto p-4">
      <div
        ref={chatContainerRef}
        className="chat-messages h-[70vh] overflow-y-auto mb-2"
      >
        {showDefaultMessage && (
          <div className="mt-[250px] p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            <h1 className="text-5xl text-black">
              Hello users, ask anything to me.{" "}
              <span className="text-pink-900 animate-pulse text-5xl">
                I am your chat assistant.
              </span>
            </h1>
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-sm text-gray-500">Typing...</div>}
        <div ref={bottomRef} />
      </div>

      <div className="flex flex-wrap gap-2 p-2">
        <select
          value={language}
          onChange={(e) => setLanguage(e.target.value)}
          className="p-1 rounded border border-gray-300"
        >
          <option value="en-IN">English (India)</option>
          <option value="hi-IN">Hindi (India)</option>
        </select>
        <button
          onClick={startListening}
          className={`p-2 ${
            isFlashing ? "bg-blue-300 animate-pulse" : "bg-blue-500"
          } rounded text-white`}
        >
          {isFlashing ? "Listening..." : "Say in mic"}
        </button>
        <button
          onClick={stopListening}
          className="p-2 bg-red-500 rounded text-white"
        >
          Stop mic
        </button>
        <button
          onClick={stopSpeaking}
          className="p-2 bg-yellow-500 rounded text-white"
        >
          Stop Speaking
        </button>
      </div>

      <div className="w-full mt-1">
        <textarea
          className="w-full p-2 border border-gray-300 rounded resize-none"
          placeholder="Type your message..."
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            handleTyping();
          }}
          rows={3}
          style={{ maxHeight: "100px", overflow: "auto" }}
        />
        <button
          onClick={handleSend}
          disabled={loading || input.trim() === ""}
          className="p-2 mt-1 w-full bg-blue-500 rounded text-white"
        >
          Send
        </button>
      </div>
    </div>
  );
}

export default Chat;
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////8th CSS good for smartphone devices////////////////////////////////////////////////

import React, { useState, useEffect, useRef } from "react";
import { AiOutlineLoading3Quarters } from "react-icons/ai";
import Prism from "prismjs";
import "prismjs/themes/prism-tomorrow.css";
import "./chat.css";

function Chat() {
  const [messages, setMessages] = useState([]);
  const [input, setInput] = useState("");
  const [loading, setLoading] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showDefaultMessage, setShowDefaultMessage] = useState(true);
  const [isFlashing, setIsFlashing] = useState(false);
  const chatContainerRef = useRef(null);
  const bottomRef = useRef(null);
  const userScrolledUp = useRef(false);
  const recognitionRef = useRef(null);
  const speechRef = useRef(null);

  useEffect(() => {
    if (window.SpeechRecognition || window.webkitSpeechRecognition) {
      const SpeechRecognition =
        window.SpeechRecognition || window.webkitSpeechRecognition;
      recognitionRef.current = new SpeechRecognition();
      recognitionRef.current.continuous = false;
      recognitionRef.current.interimResults = false;
      recognitionRef.current.lang = "en-US";

      recognitionRef.current.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setInput(transcript);
        stopListening();
      };

      recognitionRef.current.onerror = (event) => {
        console.error("Speech recognition error:", event.error);
      };

      recognitionRef.current.onstart = () => {
        setIsFlashing(true);
      };

      recognitionRef.current.onend = () => {
        setIsFlashing(false);
      };
    } else {
      alert("Your browser does not support speech recognition.");
    }
  }, []);

  useEffect(() => {
    return () => {
      if ("speechSynthesis" in window) {
        window.speechSynthesis.cancel();
        setIsSpeaking(false);
      }
    };
  }, []);

  useEffect(() => {
    if (!userScrolledUp.current) {
      bottomRef.current?.scrollIntoView({ behavior: "smooth" });
    }
  }, [messages]);

  const fetchAIResponse = async (message) => {
    const apiKey = import.meta.env.VITE_API_KEY;
    setLoading(true);

    try {
      const response = await fetch(
        `https://generativelanguage.googleapis.com/v1/models/gemini-pro:generateContent?key=${apiKey}`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            contents: [
              {
                role: "user",
                parts: [{ text: message }],
              },
            ],
          }),
        }
      );

      const data = await response.json();
      if (
        data.candidates &&
        data.candidates.length > 0 &&
        data.candidates[0].content &&
        data.candidates[0].content.parts &&
        data.candidates[0].content.parts.length > 0
      ) {
        const aiResponse = data.candidates[0].content.parts[0].text;
        const cleanedResponse = sanitizeText(aiResponse);
        speakText(cleanedResponse);
        setShowDefaultMessage(false);
        return aiResponse;
      } else {
        return "No response from the AI.";
      }
    } catch (error) {
      console.error("Error fetching AI response:", error);
      return "An error occurred while fetching the response.";
    } finally {
      setLoading(false);
    }
  };

  const sanitizeText = (text) => {
    return text.replace(/\*\*/g, "").replace(/\*/g, "");
  };

  const handleSend = async () => {
    if (input.trim() === "") return;

    setMessages((prev) => [
      ...prev,
      { sender: "user", type: "text", content: input },
    ]);
    setInput("");

    const aiResponse = await fetchAIResponse(input);
    setMessages((prev) => [
      ...prev,
      { sender: "ai", type: "text", content: aiResponse },
    ]);
  };

  const handleTyping = () => {
    setIsTyping(true);
    setTimeout(() => setIsTyping(false), 1000);
  };

  const startListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.start();
    }
  };

  const stopListening = () => {
    if (recognitionRef.current) {
      recognitionRef.current.stop();
    }
  };

  const speakText = (text) => {
    if ("speechSynthesis" in window) {
      if (speechRef.current) {
        window.speechSynthesis.cancel();
      }

      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = "en-US";
      utterance.onstart = () => setIsSpeaking(true);
      utterance.onend = () => setIsSpeaking(false);

      speechRef.current = utterance;
      window.speechSynthesis.speak(utterance);
    } else {
      alert("Your browser does not support speech synthesis.");
    }
  };

  const stopSpeaking = () => {
    if ("speechSynthesis" in window) {
      window.speechSynthesis.cancel();
      setIsSpeaking(false);
    }
  };

  const renderMessageContent = (message) => {
    switch (message.type) {
      case "text":
        return message.sender === "ai"
          ? renderFormattedContent(message.content)
          : message.content;
      default:
        return message.content;
    }
  };

  const renderFormattedContent = (content) => {
    const formattedContent = content.split("\n").map((line, index) => {
      if (line.startsWith("**")) {
        const content = line.replace(/\*\*/g, "");
        return (
          <p key={index} className="text-bold-red text-xl">
            {content}
          </p>
        );
      } else if (line.startsWith("*")) {
        const content = line.replace(/\*/g, "");
        return (
          <li key={index} className="text-black text-xl">
            {content}
          </li>
        );
      } else if (line.match(/^# /)) {
        return (
          <h2 key={index} className="text-lg font-semibold text-green-600">
            {line.replace(/^# /, "")}
          </h2>
        );
      } else if (line.match(/^## /)) {
        return (
          <h3 key={index} className="text-md font-semibold text-yellow-600">
            {line.replace(/^## /, "")}
          </h3>
        );
      } else if (line.startsWith("!")) {
        return (
          <p key={index} className="text-bold-blue">
            {line.replace(/^!/, "")}
          </p>
        );
      } else {
        return (
          <p key={index} className="text-gray-900">
            {line}
          </p>
        );
      }
    });

    return <div className="space-y-2">{formattedContent}</div>;
  };

  useEffect(() => {
    Prism.highlightAll();
  }, [messages]);

  return (
    <div className="chat-container">
      <div ref={chatContainerRef} className="chat-messages">
        {showDefaultMessage && (
          <div className="mt-[250px] p-2 rounded bg-gradient-to-r from-maroon-600 to-maroon-900 text-white">
            <h1 className="text-5xl text-black">
              Hello users, ask anything to me.{" "}
              <span className="text-pink-900 animate-pulse text-5xl">
                I am your chat assistant.
              </span>
            </h1>
          </div>
        )}
        {messages.map((msg, index) => (
          <div
            key={index}
            className={`p-2 rounded ${
              msg.sender === "user"
                ? "bg-blue-500 text-white self-end"
                : "bg-gray-300"
            }`}
          >
            {renderMessageContent(msg)}
          </div>
        ))}
        {loading && (
          <div className="flex items-center justify-center p-2">
            <AiOutlineLoading3Quarters
              className="animate-spin text-gray-500"
              size={24}
            />
          </div>
        )}
        {isTyping && <div className="p-2 text-gray-500">User is typing...</div>}
        <div ref={bottomRef} />
      </div>
      <div className="chat-input-container">
        <button
          onClick={startListening}
          className={`p-3 ${
            isFlashing ? "flashing" : ""
          } bg-green-500 text-white rounded-lg mr-2`}
        >
          🎤
        </button>
        <textarea
          value={input}
          onChange={(e) => {
            setInput(e.target.value);
            handleTyping();
          }}
          className="chat-input"
          placeholder="Type a message or click the mic..."
          rows={1}
        />
        <button
          onClick={handleSend}
          className="send-button p-3 bg-blue-500 text-white rounded-lg"
        >
          Send
        </button>
        {isSpeaking && (
          <button
            onClick={stopSpeaking}
            className="stop-button p-3 bg-red-500 text-white rounded-lg ml-2"
          >
            Stop
          </button>
        )}
      </div>
    </div>
  );
}

export default Chat;


